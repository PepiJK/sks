/*
 * Parcel Logistics Service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.20.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using KochWermann.SKS.Package.Services.Attributes;
using AutoMapper;
using KochWermann.SKS.Package.BusinessLogic.Interfaces;
using Microsoft.Extensions.Logging;
using KochWermann.SKS.Package.Services.Helpers;

namespace KochWermann.SKS.Package.Services.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class WarehouseManagementApiController : ControllerBase
    {
        private readonly IMapper _mapper;
        private readonly IWarehouseLogic _warehouseLogic;
        private readonly ILogger<WarehouseManagementApiController> _logger;


        /// <summary>
        /// 
        /// </summary>
        public WarehouseManagementApiController(IMapper mapper, IWarehouseLogic warehouseLogic, ILogger<WarehouseManagementApiController> logger)
        {
            _mapper = mapper;
            _warehouseLogic = warehouseLogic;
            _logger = logger;
            _logger.LogTrace("WarehouseManagementApiController created");
        }


        /// <summary>
        /// Exports the hierarchy of Warehouse and Truck objects. 
        /// </summary>
        /// <response code="200">Successful response</response>
        /// <response code="400">An error occurred loading.</response>
        /// <response code="404">No hierarchy loaded yet.</response>
        [HttpGet]
        [Route("/warehouse")]
        [ValidateModelState]
        [SwaggerOperation("ExportWarehouses")]
        [SwaggerResponse(statusCode: 200, type: typeof(DTOs.Warehouse), description: "Successful response")]
        [SwaggerResponse(statusCode: 400, type: typeof(DTOs.Error), description: "An error occurred loading.")]
        [SwaggerResponse(statusCode: 404, type: typeof(DTOs.Error), description: "No hierarchy loaded")]

        public virtual IActionResult ExportWarehouses()
        {
            try
            {
                _logger.LogTrace("ExportWarehouses");

                var root = _warehouseLogic.ExportWarehouses();
                if (root == null)
                    return NotFound(ControllerApiHelper.CreateErrorDTO("No hierarchy loaded yet.", _logger));

                var blWarehouse = _warehouseLogic.ExportWarehouses();
                var serviceWarehouse = _mapper.Map<DTOs.Warehouse>(blWarehouse);
                return Ok(serviceWarehouse);
            }
            catch (BusinessLogic.Entities.BLNotFoundException ex)
            {
                return NotFound(ControllerApiHelper.CreateErrorDTO("No hierarchy loaded", _logger, ex));
            }
            catch (BusinessLogic.Entities.BLException ex)
            {
                return BadRequest(ControllerApiHelper.CreateErrorDTO("An error occurred loading.", _logger, ex));
            }
            catch (Exception ex)
            {
                return BadRequest(ControllerApiHelper.CreateErrorDTO("An error occurred loading.", _logger, ex));
            }
        }

        /// <summary>
        /// Get a certain warehouse or truck by code
        /// </summary>
        /// <param name="code"></param>
        /// <response code="200">Successful response</response>
        /// <response code="400">An error occurred loading.</response>
        /// <response code="404">Warehouse id not found</response>
        [HttpGet]
        [Route("/warehouse/{code}")]
        [ValidateModelState]
        [SwaggerOperation("GetWarehouse")]
        [SwaggerResponse(statusCode: 200, type: typeof(DTOs.Warehouse), description: "Successful response")]
        [SwaggerResponse(statusCode: 400, type: typeof(DTOs.Error), description: "An error occurred loading.")]
        [SwaggerResponse(statusCode: 404, type: typeof(DTOs.Error), description: "Warehouse id not found")]
        public virtual IActionResult GetWarehouse([FromRoute][Required] string code)
        {
            try
            {
                _logger.LogTrace("GetWarehouse");

                if (string.IsNullOrWhiteSpace(code))
                    return BadRequest(ControllerApiHelper.CreateErrorDTO("Code empty or null", _logger));

                var blWarehouse = _warehouseLogic.GetWarehouse(code);
                var serviceWarehouse = _mapper.Map<DTOs.Warehouse>(blWarehouse);
                return Ok(serviceWarehouse);
            }
            catch (BusinessLogic.Entities.BLNotFoundException ex)
            {
                return NotFound(ControllerApiHelper.CreateErrorDTO("Warehouse id not found", _logger, ex));
            }
            catch (BusinessLogic.Entities.BLException ex)
            {
                return BadRequest(ControllerApiHelper.CreateErrorDTO("An error occurred loading.", _logger, ex));
            }
            catch (Exception ex)
            {
                return BadRequest(ControllerApiHelper.CreateErrorDTO("An error occurred loading.", _logger, ex));
            }
        }

        /// <summary>
        /// Imports a hierarchy of Warehouse and Truck objects. 
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Successfully loaded.</response>
        /// <response code="400">The operation failed due to an error.</response>
        [HttpPost]
        [Route("/warehouse")]
        [ValidateModelState]
        [SwaggerOperation("ImportWarehouses")]
        [SwaggerResponse(statusCode: 400, type: typeof(DTOs.Error), description: "The operation failed due to an error.")]
        public virtual IActionResult ImportWarehouses([FromBody] DTOs.Warehouse body)
        {
            try
            {
                _logger.LogTrace("ImportWarehouses");

                if (body == null)
                    return BadRequest(ControllerApiHelper.CreateErrorDTO("body is null", _logger));

                var blWarehouse = _mapper.Map<BusinessLogic.Entities.Warehouse>(body);
                _warehouseLogic.ImportWarehouses(blWarehouse);
                return Ok();
            }
            catch (BusinessLogic.Entities.BLException ex)
            {
                return BadRequest(ControllerApiHelper.CreateErrorDTO("The operation failed due to an error.", _logger, ex));
            }
            catch (Exception ex)
            {
                return BadRequest(ControllerApiHelper.CreateErrorDTO("The operation failed due to an error.", _logger, ex));
            }
        }

    }
}
