/*
 * Parcel Logistics Service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.20.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using KochWermann.SKS.Package.Services.Attributes;
using Microsoft.AspNetCore.Authorization;
using KochWermann.SKS.Package.Services.DTOs;
using AutoMapper;
using KochWermann.SKS.Package.BusinessLogic;
using KochWermann.SKS.Package.BusinessLogic.Entities;
using KochWermann.SKS.Package.Services.Mapper;

namespace KochWermann.SKS.Package.Services.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class WarehouseManagementApiController : ControllerBase
    {
        private readonly IMapper Mapper;
        /// <summary>
        /// 
        /// </summary>
        public WarehouseManagementApiController(IMapper mapper)
        {
            Mapper = mapper;
        }

        private WarehouseLogic warehouseLogic = new WarehouseLogic();

        /// <summary>
        /// Exports the hierarchy of Warehouse and Truck objects. 
        /// </summary>
        /// <response code="200">Successful response</response>
        /// <response code="400">An error occurred loading.</response>
        /// <response code="404">No hierarchy loaded yet.</response>
        [HttpGet]
        [Route("/warehouse")]
        [ValidateModelState]
        [SwaggerOperation("ExportWarehouses")]
        [SwaggerResponse(statusCode: 200, type: typeof(DTOs.Warehouse), description: "Successful response")]
        [SwaggerResponse(statusCode: 400, type: typeof(DTOs.Error), description: "An error occurred loading.")]
        public virtual IActionResult ExportWarehouses()
        {
            BusinessLogic.Entities.Warehouse BlWh = null;
            BlWh = this.warehouseLogic.ExportWarehouses();
            var ServiceWh = this.Mapper.Map<DTOs.Warehouse>(BlWh);
            return StatusCode(200, default(DTOs.Warehouse));
        }

        /// <summary>
        /// Get a certain warehouse or truck by code
        /// </summary>
        /// <param name="code"></param>
        /// <response code="200">Successful response</response>
        /// <response code="400">An error occurred loading.</response>
        /// <response code="404">Warehouse id not found</response>
        [HttpGet]
        [Route("/warehouse/{code}")]
        [ValidateModelState]
        [SwaggerOperation("GetWarehouse")]
        [SwaggerResponse(statusCode: 200, type: typeof(DTOs.Warehouse), description: "Successful response")]
        [SwaggerResponse(statusCode: 400, type: typeof(DTOs.Error), description: "An error occurred loading.")]
        public virtual IActionResult GetWarehouse([FromRoute][Required] string code)
        {
            if (!string.IsNullOrWhiteSpace(code))
            {
                if (code == "ERROR")
                    return StatusCode(400, default(DTOs.Error));

                BusinessLogic.Entities.Warehouse BlWh = null;
                BlWh = this.warehouseLogic.ExportWarehouses();
                var ServiceWh = this.Mapper.Map<DTOs.Warehouse>(BlWh);
                return StatusCode(200, default(DTOs.Warehouse));
            }

            return StatusCode(404);
        }

        /// <summary>
        /// Imports a hierarchy of Warehouse and Truck objects. 
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">Successfully loaded.</response>
        /// <response code="400">The operation failed due to an error.</response>
        [HttpPost]
        [Route("/warehouse")]
        [ValidateModelState]
        [SwaggerOperation("ImportWarehouses")]
        [SwaggerResponse(statusCode: 400, type: typeof(DTOs.Error), description: "The operation failed due to an error.")]
        public virtual IActionResult ImportWarehouses([FromBody] DTOs.Warehouse body)
        {
            if (body != null)
            {
                //test
                // DTOs.Hop h = body.NextHops[0].Hop;
                // if (h is DTOs.Warehouse)
                // {
                //     int i = 0;
                // }

                var BlWh = this.Mapper.Map<BusinessLogic.Entities.Warehouse>(body);
                this.warehouseLogic.ImportWarehouses(BlWh);
                return this.Ok();
            }

            return StatusCode(400, default(DTOs.Error));
        }
    }
}
