/*
 * Parcel Logistics Service
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.20.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using KochWermann.SKS.Package.Services.Attributes;
using KochWermann.SKS.Package.Services.DTOs;
using KochWermann.SKS.Package.BusinessLogic.Interfaces;
using Microsoft.Extensions.Logging;
using AutoMapper;
using System;
using System.Linq;
using System.Collections.Generic;

namespace KochWermann.SKS.Package.Services.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ParcelWebhookApiController : ControllerBase
    {
        private readonly IWebhookLogic _webhookLogic;
        private readonly IMapper _mapper;
        private readonly ILogger<ParcelWebhookApiController> _logger;

        /// <summary>
        ///
        /// </summary>
        public ParcelWebhookApiController(IWebhookLogic webhookLogic, IMapper mapper, ILogger<ParcelWebhookApiController> logger)
        {
            _webhookLogic = webhookLogic;
            _mapper = mapper;
            _logger = logger;
            _logger.LogTrace("ParcelWebhookApiController created");
        }

        /// <summary>
        /// Get all registered subscriptions for the parcel webhook.
        /// </summary>
        /// <param name="trackingId"></param>
        /// <response code="200">List of webooks for the &#x60;trackingId&#x60;</response>
        /// <response code="404">No parcel found with that tracking ID.</response>
        [HttpGet]
        [Route("/parcel/{trackingId}/webhooks")]
        [ValidateModelState]
        [SwaggerOperation("ListParcelWebhooks")]
        [SwaggerResponse(statusCode: 200, type: typeof(DTOs.WebhookResponses), description: "List of webooks for the &#x60;trackingId&#x60;")]
        [SwaggerResponse(statusCode: 404, type: typeof(DTOs.Error), description: "No parcel found with that tracking ID.")]
        public virtual IActionResult ListParcelWebhooks([FromRoute][Required][RegularExpression("^[A-Z0-9]{9}$")] string trackingId)
        {
            try
            {
                _logger.LogTrace($"ListParcelWebhooks with trackingId: {trackingId}.");

                if (string.IsNullOrWhiteSpace(trackingId))
                {
                    _logger.LogError("TrackingId is null or white space");
                    return BadRequest(new DTOs.Error{ErrorMessage = "TrackingId is null or white space"});
                }

                var BlWebhookReses = _webhookLogic.ListParcelWebhooks(trackingId);

                /*
                var responses = new WebhookResponses();
                responses.AddRange(hooks.Select(h => _mapper.Map<WebhookResponse>(h)));
                */

                var ServiceWebhookReses = _mapper.Map<IEnumerable<DTOs.WebhookResponse>>(BlWebhookReses);

                return Ok(ServiceWebhookReses);
            }
            catch (BusinessLogic.Entities.BLNotFoundException ex)
            {
                _logger.LogError($"No ParcelWebhooks exist with this trackingId {ex}");
                return NotFound(new DTOs.Error{ErrorMessage = "No ParcelWebhooks exist with this trackingId"});
            }
            catch (Exception ex)
            {
                _logger.LogError($"The operation failed due to an error {ex}");
                return BadRequest(new DTOs.Error{ErrorMessage = "The operation failed due to an error"});
            }
        }

        /// <summary>
        /// Subscribe to a webhook notification for the specific parcel.
        /// </summary>
        /// <param name="trackingId"></param>
        /// <param name="url"></param>
        /// <response code="200">Successful response</response>
        /// <response code="404">No parcel found with that tracking ID.</response>
        [HttpPost]
        [Route("/parcel/{trackingId}/webhooks")]
        [ValidateModelState]
        [SwaggerOperation("SubscribeParcelWebhook")]
        [SwaggerResponse(statusCode: 200, type: typeof(DTOs.WebhookResponse), description: "Successful response")]
        [SwaggerResponse(statusCode: 404, type: typeof(DTOs.Error), description: "No parcel found with that tracking ID.")]
        public virtual IActionResult SubscribeParcelWebhook([FromRoute][Required][RegularExpression("^[A-Z0-9]{9}$")] string trackingId, [FromQuery][Required()] string url)
        {
            try
            {
                _logger.LogTrace($"SubscribeParcelWebhook with trackingId: {trackingId} and url: {url}.");

                if (string.IsNullOrWhiteSpace(trackingId) || string.IsNullOrWhiteSpace(url))
                {
                    _logger.LogError("TrackingId or Url is null or white space");
                    return BadRequest(new DTOs.Error{ErrorMessage = "TrackingId or Url is null or white space"});
                }

                var BlWebhookRes = _webhookLogic.SubscribeParcelWebhook(trackingId, url);
                var ServiceWebhookRes = _mapper.Map<DTOs.WebhookResponse>(BlWebhookRes);

                return Ok(ServiceWebhookRes);
            }
            catch (BusinessLogic.Entities.BLNotFoundException ex)
            {
                _logger.LogError($"Could not find newly created webhook or parcel with trackingId {trackingId} {ex}");
                return NotFound(new DTOs.Error{ErrorMessage = $"Could not find newly created webhook or parcel with trackingId {trackingId}"});
            }
            catch (Exception ex)
            {
                _logger.LogError($"The operation failed due to an error {ex}");
                return BadRequest(new DTOs.Error{ErrorMessage = "The operation failed due to an error"});
            }
        }

        /// <summary>
        /// Remove an existing webhook subscription.
        /// </summary>
        /// <param name="id"></param>
        /// <response code="200">Success</response>
        /// <response code="404">Subscription does not exist.</response>
        [HttpDelete]
        [Route("/parcel/webhooks/{id}")]
        [ValidateModelState]
        [SwaggerOperation("UnsubscribeParcelWebhook")]
        [SwaggerResponse(statusCode: 200, type: typeof(DTOs.WebhookResponse), description: "Successful response")]
        [SwaggerResponse(statusCode: 404, type: typeof(DTOs.Error), description: "Subscription does not exist.")]
        public virtual IActionResult UnsubscribeParcelWebhook([FromRoute][Required] long? id)
        {
            try
            {
                _logger.LogTrace($"UnsubscribeParcelWebhook with id: {id}.");

                if (id == null)
                {
                    _logger.LogError("Id is null");
                    return BadRequest(new DTOs.Error{ErrorMessage = "Id is null"});
                }

                _webhookLogic.UnsubscribeParcelWebhook(id.Value);

                return Ok("successfully unsubscribed.");
            }
            catch (BusinessLogic.Entities.BLNotFoundException ex)
            {
                _logger.LogError($"Subscription does not exist {ex}");
                return NotFound(new DTOs.Error { ErrorMessage = "Subscription does not exist"});
            }
            catch (Exception ex)
            {
                _logger.LogError($"The operation failed due to an error {ex}");
                return BadRequest(new DTOs.Error { ErrorMessage = "The operation failed due to an error" });
            }
        }
    }
}
